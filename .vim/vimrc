" Basic appearance
color desert
syntax on
set number
set relativenumber
set ruler
set hlsearch
set nolinebreak
set list
set listchars=tab:›\ ,trail:⋅
set tw=80

" Indent with 4 spaces
set shiftwidth=4
set tabstop=4
set expandtab
set smartindent
set autoindent

" Remaps
inoremap jk <Esc>
nnoremap W :w<CR>
nnoremap - :w<CR>:make!<CR>
noremap <Up>    :resize +5 <CR>
noremap <Down>  :resize -5 <CR>
noremap <Left>  :vertical resize -5 <CR>
noremap <Right> :vertical resize +5 <CR>

" netrw config
let g:netrw_banner = 0  " hide netrw banner
let g:netrw_liststyle = 3  " default to 'treeview'
let g:netrw_browse_split = 3  " open files in new tab

" statusline
function WordCount()  " https://stackoverflow.com/a/4588161/
   let s:old_status = v:statusmsg
   let position = getpos(".")
   exe ":silent normal g\<c-g>"
   let stat = v:statusmsg
   let s:word_count = 0
   if stat != '--No lines in buffer--'
     let s:word_count = str2nr(split(v:statusmsg)[11])
     let v:statusmsg = s:old_status
   end
   call setpos('.', position)
   return s:word_count 
endfunction

" File-specific stuff
autocmd BufNewFile,BufRead *.md setf markdown
autocmd Filetype html,markdown,tex,typescript,vimwiki set shiftwidth=2 tabstop=2

" File-specific remaps
augroup file_remaps
    autocmd!

    autocmd BufWinEnter Makefile set noexpandtab

    " %f -- filename; %m -- is modified flag; %= alignment separator
    autocmd BufWinEnter *.tex set statusline=\ %f\ %m%=wc:%{WordCount()}\ 
    autocmd BufWinEnter *.tex nnoremap <F3> :w<CR>:!latexmk -pdf %:p<CR>
    autocmd BufWinEnter *.tex set tw=0
    autocmd BufWinEnter *.tex set linebreak
    autocmd BufWinEnter *.tex set spell

    autocmd BufWinEnter *.md nnoremap <F3> :w<CR>:!pandoc "%:p" -o "%:p:h/%:r.pdf"<CR>
augroup END

" Spellcheck mode <F4>
nnoremap <F4> :call Toggle_spell()<CR>
function Toggle_spell()
    if &l:spell
        set nospell
        echom "Spell OFF"
    else
        set spell spelllang=en_gb
        echom "Spell ON"
    endif
endfunction

" File templates
augroup templates
    autocmd!
    autocmd BufNewFile *.tex  0r ~/.vim/templates/skeleton.tex
    autocmd BufNewFile *.md   0r ~/.vim/templates/skeleton.md
augroup END

" Search for selected text, forwards or backwards, from Vim Tips Wiki
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> / :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" vim-plug
call plug#begin('~/.local/share/nvim/plugged')
  Plug 'vimwiki/vimwiki'
call plug#end()
