:PROPERTIES:
:ID:       6b70dbe3-3ce5-4ae4-bee0-db218fbfa337
:END:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

* Theme
:PROPERTIES:
:ID:       c5e5d2ae-4e6e-4710-9855-d8eeebdca7df
:END:

:PROPERTIES:
:ID:       d7a0cbe6-6c76-400d-b061-115604e4908e
:END:

#+begin_src emacs-lisp
(setq doom-theme 'doom-tomorrow-day)
#+end_src

Themes I quite like:

- ~doom-fairy-floss~ is a light purple-based theme
- ~doom-flatwhite~ is a light biege-based theme
- ~doom-nordlight~ is a light blue-based theme
- ~doom-opera-light~ is a light gray-based theme

* Dashboard
:PROPERTIES:
:ID:       6ac43331-fa55-405e-8db4-2e682a27a11e
:END:

#+begin_src emacs-lisp
(defun +ning/dashboard-date-proportion-passed (start end)
  (/
   (float-time (time-subtract
                (float-time) (org-read-date nil t start)))
   (float-time (time-subtract
                (org-read-date nil t end) (org-read-date nil t start)))))

(defun +ning/dashboard-date-decorated-progress-bar (start end)
  (let* ((prop-passed (+ning/dashboard-date-proportion-passed start end))
         (pbar-width 50)
         (pbar-pluses (min (floor (* prop-passed pbar-width)) pbar-width))
         (pbar-dashes (- pbar-width pbar-pluses))
         (prop-pretty
          (if (> prop-passed 1)
              "100%"
            (format "%4.1f%%" (* 100 prop-passed)))))
    (concat start " ["
            (make-string pbar-pluses ?+)
            (make-string pbar-dashes ?-)
            "|" prop-pretty "] " end)))

(defun ning/dashboard-widget-milestones ()
  (let ((result "\n"))
    (dolist (triplet ning/dashboard-milestones result)
      (setq result (concat result "\n"
                           (+doom-dashboard--center
                            +doom-dashboard--width
                            (car triplet))
                           "\n"
                           (+doom-dashboard--center
                            +doom-dashboard--width
                            (+ning/dashboard-date-decorated-progress-bar
                             (nth 1 triplet) (nth 2 triplet)))
                           "\n")))
    (insert result)))

(setq ning/dashboard-milestones
      '(("Year 2021" "2021-01-01" "2021-12-31")))
(if (file-exists-p "~/org/files/private-dashboard-milestones.el")
    (load "~/org/files/private-dashboard-milestones.el")
  nil)

(setq +doom-dashboard-functions
      '(doom-dashboard-widget-banner
        ning/dashboard-widget-milestones
        doom-dashboard-widget-loaded
        doom-dashboard-widget-footer))
#+end_src

* Minor configurations
** For org-mode
:PROPERTIES:
:ID:       ae2762e5-453b-4daf-b850-45ca6fe17675
:END:

Collapse code chunks by default.

#+begin_src emacs-lisp
(setq org-hide-block-startup t)
#+end_src

** For dired
:PROPERTIES:
:ID:       e37a7ba9-5869-43c6-a134-12ec9e75cde2
:END:

RET uses xdg-open.

#+begin_src emacs-lisp
(defvar unsupported-mime-types
  '("video/mp4"))

(load "subr-x")

(defun get-mimetype (filepath)
  (string-trim
   (shell-command-to-string (concat "file -b --mime-type " filepath))))

(defun dired-find-file-dwim ()
  (interactive)
  (let ((file (dired-get-filename nil t)))
    (if (member (get-mimetype file) unsupported-mime-types)
      (call-process "xdg-open" nil 0 nil file)
      (find-file file))))

(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "RET") #'dired-find-file-dwim))
#+end_src

** For company
:PROPERTIES:
:ID:       8b3f7042-bc33-4458-8621-a21b4fc3de42
:END:

Don't auto-complete in org-mode.

#+begin_src emacs-lisp
(setq company-global-modes (append company-global-modes '(org-mode)))
#+end_src

** For page-break-lines
:PROPERTIES:
:ID:       b999a2fd-092c-4391-8db7-b9c0cbee71ce
:END:

#+begin_src emacs-lisp
(global-page-break-lines-mode)
(setq page-break-lines-modes
      (append page-break-lines-modes
              '(
                snakemake-mode)))
#+end_src

* Note-taking with Org-roam
:PROPERTIES:
:ID:       52bc4886-496f-472c-a273-851511e0a3d4
:END:

At the time of writing, Doom Emacs modules have not yet updated to Org-roam v2.
So, I will have to do that plus the configuration myself.
Thankfully, Jethro himself uses Doom Emacs at GitHub:jethrokuan/dots.

#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (defun org-roam-file-find ()
    (interactive)
    (org-roam-node-find nil nil '(lambda (node) (= (org-roam-node-level node) 0))))
  (map! :leader
        :prefix "r"
        :desc "org-roam" "l" #'org-roam-buffer-toggle
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-file-find" "f" #'org-roam-file-find
        :desc "org-roam-node-find" "F" #'org-roam-node-find
        :desc "org-roam-capture" "c" #'org-roam-capture
        :desc "org-roam-tag-add" "t" #'org-roam-tag-add
        :desc "org-roam-alias-add" "a" #'org-roam-alias-add
        :desc "org-roam-node-random" "?" #'org-roam-node-random
        :desc "org-roam-dailies-goto-today" "." #'org-roam-dailies-goto-today
        :desc "org-roam-dailies-goto-next-note" "/" #'org-roam-dailies-goto-next-note
        :desc "org-roam-dailies-goto-previous-note" "," #'org-roam-dailies-goto-previous-note)
  (setq org-roam-directory (file-truename "~/org/roam")
        org-id-link-to-org-use-id t
        org-roam-v2-ack t)
  (add-to-list 'display-buffer-alist
               '(("\\*org-roam\\*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.33)
                  (window-height . fit-window-to-buffer))))
  :config
  (org-roam-db-autosync-enable))
#+end_src

** Use Deft to search Org-roam notes
:PROPERTIES:
:ID:       15a57748-c59d-4005-8629-c706337e4542
:END:

The default Deft buffer shows on the left-hand side the head of the file, and on the right the last modified time.
However, the head of Org-roam files are not informative at all, because they hold the ~:PROPERTIES:~ tag.
So, show the filename at the left-hand side instead.

#+begin_src emacs-lisp
(setq deft-directory "~/org/roam"
      deft-use-filename-as-title t
      deft-strip-summary-regexp "\\(^:[[:upper:]]*:.*\\|^#\\+.+$\\)"
      ; Find org-dailies
      deft-recursive t)
#+end_src

** Set Org-agenda to search Org-roam notes
:PROPERTIES:
:ID:       5bfbb4f4-b7b8-43ef-82a2-c5eb85c4682e
:END:

#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/roam/"))
#+end_src

** Org-roam-ui
:PROPERTIES:
:ID:       1536a96b-f528-4e27-b2e7-ec640762e6e4
:END:

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)
(use-package! org-roam-ui
    :after org-roam
    :config (setq org-roam-ui-open-on-start t))
(defun ning/org-roam-ui-browse ()
  "Open org-roam-ui in the browser."
  (interactive)
  (browse-url-xdg-open "http://127.0.0.1:35901/"))
#+end_src

* Sync notes with rclone
:PROPERTIES:
:ID:       d7020545-f73b-44f3-b524-eb8bade4f062
:END:

It seems like rclone will copy over a file at the destination as long as that file at source is different, even if the modified time of destination is later than source.
So, to prevent overwriting changes, it is best to only have one emacs open across all my machines.
Then, I will pull from Google Drive on start-up and push on exit --- Doom Emacs starts really fast, anyways.

#+begin_src emacs-lisp
(defun ning/get-rclone-sentinel (should-org-roam-setup-flag)
  "Internal. Get a sentinel function for ning/push and ning/pull."
  (lambda (proc event)
    (if should-org-roam-setup-flag (org-roam-setup) nil)
    (if (string= event "finished\n")
        (message (concat (process-name proc) " done"))
      (message
       (propertize (concat (process-name proc) " failed")
                   'face '(:foreground "red"))))))

(defun ning/push ()
  "Sync the ~/org directory to Google Drive via rclone."
  (interactive)
  (set-process-sentinel
   (start-process "rclone-push" "*rclone*" "rclone"
                  "sync" "--progress" (expand-file-name "~/org") "remote:org")
   (ning/get-rclone-sentinel nil)))

(defun ning/pull ()
  "Sync the ~/org directory from Google Drive via rclone."
  (interactive)
  (if (y-or-n-p "Pull from Google Drive? (WARNING: will overwrite ~/org/)")
      (set-process-sentinel
       (start-process "rclone-pull" "*rclone*" "rclone"
                      "sync" "--progress" "remote:org" (expand-file-name "~/org"))
       (ning/get-rclone-sentinel t))
    nil))

(defun ning/push-synchronous ()
  "Sync the ~/org directory to Google Drive via rclone in the foreground"
  (interactive)
  (delete-other-windows)
  (switch-to-buffer "*rclone*")
  (call-process "rclone" nil "*rclone*" t
                "sync" "--progress" (expand-file-name "~/org") "remote:org"))
#+end_src

* Easy image insertion with Org-download
:PROPERTIES:
:ID:       6dc51b5f-5bff-46a6-90ad-587b1f89749b
:END:

#+begin_src emacs-lisp
(use-package! org-download
  :config
  (setq-default org-download-image-dir "~/org/files"
                org-download-heading-lvl nil))
#+end_src

* Task management with Org-agenda
:PROPERTIES:
:ID:       94a80c46-03e0-4f0d-a4c7-e6e8a55a00e0
:END:

Doom Emacs defines a whole bunch of ~TODO~ states, many of which I do not use.
Simplify the list:

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         ; Each keyword can optionally specify a character for fast state
         ; selection... For example, "WAIT(w)" says that the WAIT state can be
         ; selected with the "w" key.
         "TODO(t)"
         ; If one of the "keywords" is the vertical bar, "|", the remaining
         ; keywords signify that no further action is necessary.
         "|"
         "DONE(d)"
         ; Each keyword may also specify if a timestamp or a note should be
         ; recorded when entering or leaving the state, by adding additional
         ; characters in the parenthesis after the keyword... "@" means to add
         ; a note (with time)
         "CANCELLED(c)")))
#+end_src

My tasks come from Org-roam files, which are quite verbose.
So, omit filenames from the Org-agenda view.

#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
  (add-to-list 'org-agenda-prefix-format '(agenda . "  ")))
(setq org-agenda-span 7)
#+end_src

By default, tasks with incomplete task subtrees are dimmed in the agenda view.
I conceptualize my subtrees more as a list of steps rather than a list of subtasks, so disable that dimming.

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
#+end_src

** Showing completed tasks
:PROPERTIES:
:ID:       fee3f692-2b91-4ec6-bba6-c49b626cd868
:END:

Looking at completed tasks (~DONE~) helps with my mood.
In particular, I would like to view completed tasks starting from yesterday.

#+begin_src emacs-lisp
(setq org-agenda-start-day "-1d")
#+end_src

It would be nice to also visualize when each task was completed.

#+begin_src emacs-lisp
((setq var )
    org-agenda-skip-deadline-prewarning-if-scheduled t
    org-deadline-warning-days 0
    ; Otherwise, marking a task as done gives it a timestamp without time
    org-log-done "time"
    ; "In Logbook mode, entries that were marked as done while logging was on
    ; (see the variable org-log-done) are shown in the agenda, as are entries
    ; that have been clocked on that day."
    org-agenda-start-with-log-mode '(closed)
    ; Without org-agenda-skip-* variables set to t, DONE entries will still
    ; appear below the "Logbook" section of a day.
    org-agenda-skip-scheduled-if-done t
    org-agenda-skip-deadline-if-done t)
#+end_src

* Research interactive helper functions
:PROPERTIES:
:ID:       b18337f4-dd0f-4381-b35e-b970a36e4f09
:END:

** Search RefSNP for word at point
:PROPERTIES:
:ID:       d28262ec-ede7-43fd-a45e-bde7e6a9157f
:END:

#+begin_src emacs-lisp
(defun ning/refsnp-word-at-point ()
  "Open the NCBI RefSNP page for the word at point (which hopefully, is a RefSNP number)"
  (interactive)
  (browse-url-xdg-open
   (concat "https://www.ncbi.nlm.nih.gov/snp/"
           (thing-at-point 'word 'no-properties))))
#+end_src

** Google-scholar for text in region
:PROPERTIES:
:ID:       d94a0f04-ac3d-4028-b7cb-21e46d9aaa65
:END:

#+begin_src emacs-lisp
(defun ning/gscholar-text-in-region (start end)
  "Search Google Scholar for the text of the selected region"
  (interactive "r")
  (browse-url-xdg-open
   (concat "https://scholar.google.com/scholar?&q="
           (url-hexify-string (buffer-substring start end)))))
#+end_src

* Start-up commands
:PROPERTIES:
:ID:       64addb97-c483-4bc1-bacd-7305f2c8a53f
:END:

#+begin_src emacs-lisp
(ning/pull)
#+end_src

* Exit commands
:PROPERTIES:
:ID:       4265145c-097b-49ca-8564-b99f61a4b693
:END:

#+begin_src emacs-lisp
(add-hook 'kill-emacs-hook 'ning/push-synchronous)
#+end_src
