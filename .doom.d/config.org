:PROPERTIES:
:ID:       6b70dbe3-3ce5-4ae4-bee0-db218fbfa337
:END:
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

* Appearance
:PROPERTIES:
:ID:       c5e5d2ae-4e6e-4710-9855-d8eeebdca7df
:END:

#+begin_src emacs-lisp
(setq doom-theme 'doom-flatwhite)
#+end_src

Browse https://github.com/hlissner/emacs-doom-themes for more.

* Configure vanilla emacs behavior
** Start the Emacs server

#+begin_src emacs-lisp
(server-start)
#+end_src

** Enable up-/downcase-region

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

** For dired
:PROPERTIES:
:ID:       e37a7ba9-5869-43c6-a134-12ec9e75cde2
:END:

RET uses xdg-open.

#+begin_src emacs-lisp
(defvar unsupported-mime-types
  '("video/mp4"))

(load "subr-x")

(defun get-mimetype (filepath)
  (string-trim
   (shell-command-to-string (concat "file -b --mime-type " (shell-quote-argument filepath)))))

(defun dired-find-file-dwim ()
  (interactive)
  (let ((file (dired-get-filename nil t)))
    (if (member (get-mimetype file) unsupported-mime-types)
      (call-process "xdg-open" nil 0 nil file)
      (find-file file))))

(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "RET") #'dired-find-file-dwim))
#+end_src

* Configure company

Don't auto-complete in org-mode.

#+begin_src emacs-lisp
(setq company-global-modes (append company-global-modes '(org-mode)))
#+end_src

* Configure conda

#+begin_src emacs-lisp
(use-package! conda
  :init
  (setq conda-anaconda-home "~/miniconda3"))
#+end_src

* Configure deft
:PROPERTIES:
:ID:       15a57748-c59d-4005-8629-c706337e4542
:END:

The default Deft buffer shows on the left-hand side the head of the file, and on the right the last modified time.
However, the head of Org-roam files are not informative at all, because they hold the ~:PROPERTIES:~ tag.
So, show the filename at the left-hand side instead.

#+begin_src emacs-lisp
(setq deft-directory "~/org/roam"
      deft-recursive t)
#+end_src

Also add [[https://github.com/jrblevin/deft/issues/75#issuecomment-905031872][a fix from GitHub user codemac]] for deft to correctly parse titles from org-roam v2 files.

#+begin_src emacs-lisp
(defun cm/deft-parse-title (file contents)
  "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
  (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
    (if begin
        (string-trim (substring contents begin (match-end 0))
                     "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
      (deft-base-filename file))))

(advice-add 'deft-parse-title :override #'cm/deft-parse-title)
(setq deft-strip-summary-regexp
      (concat "\\("
              "[\n\t]" ;; blank
              "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
              "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
              "\\)"))
#+end_src

* Configure org
** Appearance
:PROPERTIES:
:ID:       ae2762e5-453b-4daf-b850-45ca6fe17675
:END:

Collapse code chunks by default.
Both variables need to be set ([[https://web.archive.org/web/20210912005440/https://orgmode.org/list/87wntgaz5u.fsf@kyleam.com/]["Re: "#+STARTUP: hideblocks" has no effect?"]])

#+begin_src emacs-lisp
(setq org-hide-block-startup t
      org-startup-folded 'nofold)
#+end_src

Align and shrink tables on start-up.

#+begin_src emacs-lisp
(setq org-startup-align-all-tables t
      org-startup-shrink-all-tables t)
#+end_src

* Configure org-agenda
:PROPERTIES:
:ID:       94a80c46-03e0-4f0d-a4c7-e6e8a55a00e0
:END:

** Set Org-agenda to search Org-roam notes
:PROPERTIES:
:ID:       5bfbb4f4-b7b8-43ef-82a2-c5eb85c4682e
:END:

I keep notes with active tasks in a separate subdirectory to speed up ~Org-agenda~.

#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/roam/active-tasks"))
#+end_src

** Todo keywords
:PROPERTIES:
:ID:       d8e0acba-e9eb-4f34-8062-9faa907d0356
:END:

Doom Emacs defines a whole bunch of ~TODO~ states, many of which I do not use.
Simplify the list:

#+begin_src emacs-lisp
; Must be eval'd after org: https://github.com/hlissner/doom-emacs/issues/2913
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "CANCELED(c)" "DONE(d)"))))
#+end_src

When a task is done, mark it with a ~CLOSED~ timestamp.

#+begin_src emacs-lisp
(setq org-log-done "time")
#+end_src

** Agenda view

The default prefix for org-agenda items includes their file names, but org-roam file names are incredibly verbose.
So, prefix each agenda item with just an indentation.

#+begin_src emacs-lisp
(with-eval-after-load 'org-agenda
    (add-to-list 'org-agenda-prefix-format '(agenda . "  ")))
#+end_src

Show tasks starting from yesterday, up to six days from today.

#+begin_src emacs-lisp
(setq org-agenda-start-day "-1d"
      org-agenda-span 8)
#+end_src

Don't dim tasks blocked by subtasks: for me, subtasks represents steps to complete the parent task.
I do not think of them as tasks by themselves.

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
#+end_src

org-agenda warns about upcoming deadlines by showing them in today's agenda.
That crowds the daily agenda, in my opinion.

#+begin_src emacs-lisp
(setq org-deadline-warning-days 0
      org-agenda-skip-scheduled-if-deadline-is-shown t)
#+end_src

By default, closed tasks are shown on the date they were scheduled.
I prefer that they are shown on the date they were done.
First, I set ~org-agenda-skip-*-if-done~  to ~nil~ to hide done tasks from their scheduled date, then I use log-mode to show done tasks on the date they were done.

#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-start-with-log-mode '(closed))
#+end_src

* Configure org-crypt

See: https://orgmode.org/manual/Org-Crypt.html

#+begin_src
(require 'org-crypt')
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
(setq org-crypt-key nil)
#+end_src

* Configure org-download
:PROPERTIES:
:ID:       6dc51b5f-5bff-46a6-90ad-587b1f89749b
:END:

#+begin_src emacs-lisp
(use-package! org-download
  :config
  (setq-default org-download-image-dir "~/org/files"
                org-download-heading-lvl nil))
#+end_src

* Configure org-roam
:PROPERTIES:
:ID:       52bc4886-496f-472c-a273-851511e0a3d4
:END:

Adapted from Jethro at GitHub:jethrokuan/dots.

#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (defun org-roam-file-find ()
    (interactive)
    (org-roam-node-find nil nil '(lambda (node) (= (org-roam-node-level node) 0))))
  (map! :leader
        :prefix "r"
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-file-find" "f" #'org-roam-file-find
        :desc "org-roam-capture" "c" #'org-roam-capture
        :desc "org-roam-tag-add" "t" #'org-roam-tag-add
        :desc "org-roam-alias-add" "a" #'org-roam-alias-add
        :desc "org-roam-dailies-goto-today" "." #'org-roam-dailies-goto-today
        :desc "org-roam-dailies-goto-next-note" "/" #'org-roam-dailies-goto-next-note
        :desc "org-roam-dailies-goto-previous-note" "," #'org-roam-dailies-goto-previous-note)
  (setq org-roam-directory (file-truename "~/org/roam")
        org-id-link-to-org-use-id t
        org-roam-v2-ack t
        org-roam-node-display-template (concat "${title:*}" (propertize "${tags:10}" 'face 'org-tag))
        +org-roam-open-buffer-on-find-file nil
        org-roam-capture-templates '(("n" "note" plain "%?" :target
                                      (file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                                      :unnarrowed t :immediate-finish t)
                                     ("t" "task" plain "%?" :target
                                      (file+head "active-tasks/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :task:")
                                      :unnarrowed t :immediate-finish t)
                                     ("l" "lit" plain "%?" :target
                                      (file+head "ref-notes/${citekey}.org" "#+title: ${author-abbrev} ${year} - ${title}\n")
                                      :unnarrowed t :immediate-finish t)))
  (add-to-list 'display-buffer-alist
               '(("\\*org-roam\\*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.33)
                  (window-height . fit-window-to-buffer))))
  :config
  (org-roam-db-autosync-enable))
#+end_src

** org-roam-ui
:PROPERTIES:
:ID:       1536a96b-f528-4e27-b2e7-ec640762e6e4
:END:

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)
(use-package! org-roam-ui
    :after org-roam
    :config (setq org-roam-ui-open-on-start t))
(defun ning/org-roam-ui-browse ()
  "Open org-roam-ui in the browser."
  (interactive)
  (browse-url-xdg-open "http://127.0.0.1:35901/"))
#+end_src

* Configure org-roam-bibtex (incl. org-ref)

#+begin_src emacs-lisp
(use-package! org-ref
  :init (setq doi-utils-download-pdf nil
              bibtex-autokey-year-title-separator nil
              bibtex-autokey-titleword-separator "-")
        (map! :leader
              :prefix "r"
              :desc "org-ref-insert-link" "l" #'org-ref-insert-link)
  :config (require 'bibtex))

(use-package! ivy-bibtex
  :init
  (setq bibtex-completion-bibliography '("~/org/files/references.bib")
        bibtex-completion-notes-path "~/org/roam/ref-notes/"
        bibtex-completion-library-path "~/org/ref-files/"
        ivy-bibtex-default-action 'ivy-bibtex-edit-notes
        ivy-bibtex-default-multi-action 'ivy-bibtex-insert-bibtex))

(use-package! org-roam-bibtex
  :after org-roam
  :init (setq orb-roam-ref-format 'org-ref-v3
              orb-preformat-keywords '("citekey" "author-abbrev" "year" "title"))
  :config
  (org-roam-bibtex-mode)
  (require 'org-ref))
#+end_src

To insert a link, use ~C-c r l~ (org-ref-insert-link).
To navigate to a reference-associated note, use ~C-c n b~ (ivy-bibtex) and select a single item (runs ivy-bibtex-edit-notes).
To insert a reference list into the current buffer, use use ~C-c n b~ (ivy-bibtex) and select one or more items (select using ~C <space>~, runs ivy-bibtex-insert-bibtex).

* Configure ui/doom-dashboard
:PROPERTIES:
:ID:       6ac43331-fa55-405e-8db4-2e682a27a11e
:END:

#+begin_src emacs-lisp
(defun +ning/dashboard-date-proportion-passed (start end)
  (/
   (float-time (time-subtract
                (float-time) (org-read-date nil t start)))
   (float-time (time-subtract
                (org-read-date nil t end) (org-read-date nil t start)))))

(defun +ning/dashboard-date-decorated-progress-bar (start end)
  (let* ((prop-passed (+ning/dashboard-date-proportion-passed start end))
         (pbar-width 50)
         (pbar-pluses (min (floor (* prop-passed pbar-width)) pbar-width))
         (pbar-dashes (- pbar-width pbar-pluses))
         (prop-pretty
          (if (> prop-passed 1)
              "100%"
            (format "%4.1f%%" (* 100 prop-passed)))))
    (concat start " ["
            (make-string pbar-pluses ?+)
            (make-string pbar-dashes ?-)
            "|" prop-pretty "] " end)))

(defun ning/dashboard-widget-milestones ()
  (let ((result "\n"))
    (dolist (triplet ning/dashboard-milestones result)
      (setq result (concat result "\n"
                           (+doom-dashboard--center
                            +doom-dashboard--width
                            (car triplet))
                           "\n"
                           (+doom-dashboard--center
                            +doom-dashboard--width
                            (+ning/dashboard-date-decorated-progress-bar
                             (nth 1 triplet) (nth 2 triplet)))
                           "\n")))
    (insert result)))

(setq ning/dashboard-milestones
      '(("Year 2021" "2021-01-01" "2021-12-31")))
(if (file-exists-p "~/org/files/private-dashboard-milestones.el")
    (load "~/org/files/private-dashboard-milestones.el")
  nil)

(setq +doom-dashboard-functions
      '(doom-dashboard-widget-banner
        ning/dashboard-widget-milestones
        doom-dashboard-widget-loaded
        doom-dashboard-widget-footer))
#+end_src

* Configure ui/workspaces

#+begin_src emacs-lisp
(map! :leader
        :prefix "w"
        :desc "+workspace/swap-left" "<left>" #'+workspace/swap-left
        :desc "+workspace/swap-right" "<right>" #'+workspace/swap-right)
#+end_src

* Custom: sync notes with unison
:PROPERTIES:
:ID:       d7020545-f73b-44f3-b524-eb8bade4f062
:END:

I had previously done this with rclone with Google Drive, but rclone cannot handle conflicts well --- out of the box, it only syncs whole directories at a time, always overwriting changes.

#+begin_src emacs-lisp
(defun ning/get-time-string ()
  "Get a string, trimmed for white-spaces, like 1.43pm."
  (downcase (string-trim (format-time-string "%l.%M%p"))))

(defun ning/get-unison-sentinel (should-org-roam-setup-flag)
  "Internal. Get a sentinel function."
  (lambda (proc event)
    (if should-org-roam-setup-flag (org-roam-setup) nil)
    (if (string= event "finished\n")
        (message (concat (process-name proc) " done at " (ning/get-time-string)))
      (message
       (propertize (concat (process-name proc) " failed at " (ning/get-time-string))
                   'face '(:foreground "red"))))))

(defun ning/sync-show-unison-log ()
  "Switch to the unison log buffer"
  (interactive)
  (switch-to-buffer "*unison*"))

(defun ning/sync ()
  "Sync the ~/org directory to ssh:meowmeow. Returns the process."
  (interactive)
  ; Delimit different runs with a page break.
  (save-excursion
    (with-current-buffer (get-buffer-create "*unison*")
      (end-of-buffer)
      (insert (concat "\n==" (current-time-string) "==\n"))
      (page-break-lines-mode 1))
    (make-process
     :name "ning/sync"
     :buffer "*unison*"
     :command `("unison" "-batch" ,(expand-file-name "~/org") "ssh://meowmeow//org")
     ; Unison breaks lines with carriage returns only, no matter the host OS.
     :coding 'undecided-mac
     :sentinel (ning/get-unison-sentinel t))))

(defun ning/sync-synchronous ()
  "Sync the ~/org directory to ssh:meowmeow. Returns the process."
  (interactive)
  (delete-other-windows)
  (switch-to-buffer (get-buffer-create "*unison*"))
  (end-of-buffer)
  (insert (concat "\n==" (current-time-string) "==\n"))
  (page-break-lines-mode 1)
  (let ((coding-system-for-read 'undecided-mac))
    (call-process "unison" nil "*unison*" t "-batch" (expand-file-name "~/org") "ssh://meowmeow//org")))
#+end_src

Sync on start-up.

#+begin_src emacs-lisp
(after! org-roam (ning/sync))
#+end_src

Sync on idle.

#+begin_src emacs-lisp
(run-with-idle-timer 60 t 'ning/sync)
#+end_src

Sync on return from idle.

#+begin_src emacs-lisp
(defvar ning/has-idled-past-sync-threshold nil)
(run-with-idle-timer 300 t (lambda () (setq ning/has-idled-past-sync-threshold t)))
(add-hook 'post-command-hook
          (lambda () (when ning/has-idled-past-sync-threshold
                       (ning/sync)
                       (setq ning/has-idled-past-sync-threshold nil))))
#+end_src

Sync on exit.

#+begin_src emacs-lisp
(add-hook 'kill-emacs-hook (lambda () (ning/sync-synchronous) (sleep-for 1)))
#+end_src

* Custom: query online databases
:PROPERTIES:
:ID:       b18337f4-dd0f-4381-b35e-b970a36e4f09
:END:

** Search RefSNP for word at point
:PROPERTIES:
:ID:       d28262ec-ede7-43fd-a45e-bde7e6a9157f
:END:

#+begin_src emacs-lisp
(defun ning/refsnp-word-at-point ()
  "Open the NCBI RefSNP page for the word at point (which hopefully, is a RefSNP number)"
  (interactive)
  (browse-url-xdg-open
   (concat "https://www.ncbi.nlm.nih.gov/snp/"
           (thing-at-point 'word 'no-properties))))
#+end_src

** Google-scholar for text in region
:PROPERTIES:
:ID:       d94a0f04-ac3d-4028-b7cb-21e46d9aaa65
:END:

#+begin_src emacs-lisp
(defun ning/gscholar-text-in-region (start end)
  "Search Google Scholar for the text of the selected region"
  (interactive "r")
  (browse-url-xdg-open
   (concat "https://scholar.google.com/scholar?&q="
           (url-hexify-string (buffer-substring start end)))))
#+end_src
