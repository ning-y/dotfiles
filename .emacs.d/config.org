#+TITLE: emacs config

Ensure that /use-package/ is installed, then add the MELPA repository.
Here, I use /http/ rather than /https/, because otherwise there is a problem in installing /zetteldeft/ later (and possibly also for other packages)[fn:: https://emacs.stackexchange.com/a/39295/30033].

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives
  '("MELPA" . "http://melpa.org/packages/"))
(add-to-list 'package-archives
  '("org" . "https://orgmode.org/elpa/") t)
(package-initialize)
(package-refresh-contents)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

* Configurations for vanilla Emacs

** Aesthetics

*** Use the ~spacemacs-light~ theme

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-common
  :ensure spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-light t))
#+END_SRC

*** Set column width as 80 rather than 70

#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

***  Show column number in the mode line

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Don't show menu and tool bars in graphical Emacs

    #+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
    #+end_src

*** Show tab characters and highlight trailing spaces

    #+begin_src emacs-lisp
(global-whitespace-mode 1)
(setq whitespace-style '(face trailing tabs tab-mark))
    #+end_src

    #+RESULTS:
    | face | trailing | tabs | tab-mark |

** Behaviour

*** Never ask me to type "yes"/​"no", only "y"/"n"

    #+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

*** Don't ask when reverting PDF buffers

#+begin_src emacs-lisp
(setq revert-without-query '("pdf$"))
#+end_src

*** Only one, not two spaces follow a period, at a sentence's end

This affects how sentence-based movements work, e.g. ~M-f~ and ~M-b~.

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

*** Eagerly save bookmarks whenever they are created

    The default behaviour is to only save when Emacs is killed, or upon ~M-x bookmark-save~.

#+begin_src emacs-lisp
(setq bookmark-save-flag 1)
#+end_src

*** Show human-readable file sizes in dired

#+begin_src emacs-lisp
(setq dired-listing-switches "-alh")
#+end_src

*** ~RET~ in dired uses xdg-open for most file types

I copied this from the comments of [[https://emacs.stackexchange.com/a/39044/30033][this StackExchange answer]].
~unsupported-mime-types~ are MIME types not supported by Emacs.

#+begin_src emacs-lisp
(defvar unsupported-mime-types
  '("video/mp4"))

(load "subr-x")

(defun get-mimetype (filepath)
  (string-trim
   (shell-command-to-string (concat "file -b --mime-type " filepath))))

(defun dired-find-file-dwim ()
  (interactive)
  (let ((file (dired-get-filename nil t)))
    (if (member (get-mimetype file) unsupported-mime-types)
      (call-process "xdg-open" nil 0 nil file)
      (find-file file))))

(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "RET") #'dired-find-file-dwim))
#+end_src

#+RESULTS:
: dired-find-file-dwim

*** Resize windows easily

Taken from the emacswiki:

#+begin_src emacs-lisp
(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)
#+end_src

** Custom functions

*** Insert or manipulate strings

Insert a _z_​ero-​_w_​idth _s_​pace.

#+BEGIN_SRC emacs-lisp
(defun my-zws ()
  (interactive)
  (insert-char #x200b))
#+END_SRC

Insert a section sign (§).

#+begin_src emacs-lisp
(defun my-sec ()
  (interactive)
  (insert-char #xa7))
#+end_src

Insert greek alphabets.

#+begin_src emacs-lisp
(defun my-greek ()
  (interactive)
  (insert-char (my-greek-utf8 (my-greek-prompt))))

(defun my-greek-prompt ()
  (completing-read "Greek letter: " '(
      "Alpha" "alpha" "Beta" "beta" "Gamma" "gamma" "Delta" "delta"
      "Epsilon" "epsilon" "Zeta" "zeta" "Eta" "eta" "Theta" "theta"
      "Iota" "iota" "Kappa" "kappa" "Lambda" "lambda" "Mu" "mu" "Nu" "nu"
      "Xi" "xi" "Omicron" "omnicron" "Pi" "pi" "Rho" "rho" "Sigma" "sigma"
      "Tau" "tau" "Upsilon" "upsilon" "Phi" "phi" "Chi" "chi" "Psi" "psi"
      "Omega" "omega"
  ) nil t))

(defun my-greek-utf8 (letter)
  (pcase letter
    ("alpha" #x3B1)   ("Alpha" #x391)
    ("beta" #x3B2)    ("Beta" #x392)
    ("gamma" #x3B3)   ("Gamma" #x393)
    ("delta" #x3B4)   ("Delta" #x394)
    ("epsilon" #x3B5) ("Epsilon" #x395)
    ("zeta" #x3B6)    ("Zeta" #x396)
    ("eta" #x3B7)     ("Eta" #x397)
    ("theta" #x3B8)   ("Theta" #x398)
    ("iota" #x3B9)    ("Iota" #x399)
    ("kappa" #x3BA)   ("Kappa" #x39A)
    ("lambda" #x3BB)  ("Lambda" #x39B)
    ("mu" #x3BC)      ("Mu" #x39C)
    ("nu" #x3BD)      ("Nu" #x39D)
    ("xi" #x3BE)      ("Xi" #x39E)
    ("omicron" #x3BF) ("Omicron" #x39F)
    ("pi" #x3B0)      ("Pi" #x3A0)
    ("rho" #x3B1)     ("Rho" #x3A1)
    ("sigma" #x3B3)   ("Sigma" #x3A3)
    ("tau" #x3B4)     ("Tau" #x3A4)
    ("upsilon" #x3B5) ("Upsilon" #x3A5)
    ("phi" #x3B6)     ("Phi" #x3A6)
    ("chi" #x3B7)     ("Chi" #x3A7)
    ("psi" #x3B8)     ("Psi" #x3A8)
    ("omega" #xBA9)   ("Omega" #x3A9)
    (otherwise nil)))
#+end_src

Generate smol text.
Saves to clipboard by default.[fn:: https://stackoverflow.com/a/2178989/6910451]

#+begin_src emacs-lisp
(defun my-smol-string ()
  (interactive)
  (let ((string (read-string "Text: ")))
    (with-temp-buffer
      (insert (kill-new (mapconcat 'my-smol-char-string string "")))
      (clipboard-kill-region (point-min) (point-max)))))

(defun my-smol-char-string (char) (char-to-string (my-smol-char-hex char)))

(defun my-smol-char-hex (char)
  (pcase (downcase (char-to-string char))  ; mapconcat passes chars
    ("a" #x1D43) ("b" #x1D47) ("c" #x1D9C)
    ("d" #x1D48) ("e" #x1D49) ("f" #x1DA0)
    ("g" #x1D4D) ("h" #x02B0) ("i" #x1DA6)
    ("j" #x02B2) ("k" #x1D4F) ("l" #x02E1)
    ("m" #x1D50) ("n" #x207f) ("o" #x1D52)
    ("p" #x1D56) ("q" #x7520) ("r" #x02B3)
    ("s" #x02E2) ("t" #x1D57) ("u" #x1D58)
    ("v" #x1D5B) ("w" #x02B7) ("x" #x02E3)
    ("y" #x02B8) ("z" #x1DBB) (otherwise #x20)  ; the space character
))
#+end_src

*** Other functions

Sync to Google Drive (requires prior set-up of ~rclone~).

#+begin_src emacs-lisp
(defun my-sync ()
  "Sync the zetteldeft notes directory to Google Drive via rclone."
  (interactive)
  (async-shell-command "rclone sync ~/notes remote:notes && echo rclone OK"))
#+end_src

Except for the current buffer, kill all other buffers.

#+BEGIN_SRC emacs-lisp
(defun my-kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer
        (delq (current-buffer)
              (remove-if-not 'buffer-file-name (buffer-list)))))
#+END_SRC

Load this config file.

#+BEGIN_SRC emacs-lisp
(defun my-load-config ()
  (interactive)
    (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

* Configurations for Ivy and friends

#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :demand
  :bind (("C-x <up>" . ivy-switch-view)
         ("C-x <down>" . ivy-push-view))
  :custom  (ivy-use-virtual-buffers t)
  :config (ivy-mode))
#+end_src

~:defer 0.1~ ensures that ~ivy~ loads, if it hasn't already been loaded after 0.1 seconds.
With that argument, ~counsel~ and ~swiper~ will not be loaded at start-up, until their first invocation.

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode 1))

(use-package swiper
  :ensure t
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

* Configurations for Org mode

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

Enable the ~:RESET_CHECK_BOXES:~ property.[fn:: https://stackoverflow.com/q/20164918/6910451]

#+BEGIN_SRC emacs-lisp
(use-package org-checklist
  :ensure org-plus-contrib)
#+END_SRC

Flyspell by default.
~M-$~ to open suggestions.

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

Babel languages.

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
  (append org-babel-load-languages
    '((R . t)
      (python . t)
      (shell . t))))
(setq org-babel-python-command "python3")
#+end_src

Open ~org-agenda~ in the current, rather than other window (default).

#+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+end_src

/TODO:/ Document the following.

#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
(setq org-todo-keywords '((sequence "TODO" "DONE")))
#+END_SRC

*** ~C-c a~ switches to the agenda buffer if it exists

Otherwise, it creates the buffer, then switches to it.
Using a prefix argument just calls ~org-agenda~.

#+begin_src emacs-lisp
(defun ning-agenda (dummy)
  (interactive "P")
  (if dummy
    (org-agenda)
    (if (get-buffer "*Org Agenda*")
      (switch-to-buffer "*Org Agenda*")
      (org-agenda-list)))
)

(global-set-key (kbd "C-c a") 'ning-agenda)
#+end_src

** Asynchronous src block execution

#+begin_src emacs-lisp
(use-package ob-async :ensure t)
#+end_src

** mixed-pitch

A minor mode that allows for variable-width fonts.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :ensure t
  :hook
  (org-mode . mixed-pitch-mode))
#+end_src

** Structure Templates

[[https://orgmode.org/manual/Structure-Templates.html][Structure templates]] allow you to quickly insert predefined text into org mode files.
The default behaviour is to open an interactive menu using ~C-c C-,~, and where the text to be inserted is chosen.
I opt instead to use the older /org-tempo/ behaviour which uses a much quicker ~< trigger TAB~.
Continue using ~< s TAB~ for easy templates[fn:: https://emacs.stackexchange.com/a/46992/30033].

#+begin_src emacs-lisp
(unless (version< (org-version) "9.2")
  (require 'org-tempo))
#+end_src

*** Custom Structure Templates

/TODO:/ Set this as a default export option rather than a thing to be manually included.

#+begin_src emacs-lisp
(unless (version< (org-version) "9.2")
  (tempo-define-template "org-export-css" ; template name, for documentation only
    '("#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js" n
      "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" />" n
      "#+HTML_HEAD: <style> p { text-align: justify; } </style>")
    "<css"
    "Insert properties for Solarized CSS"
    'org-tempo-tags))
#+end_src

Quick template to insert images.
~p~ will place the cursor at that position when ~tempo-interactive~  is ~nil~, which it is.
To force a mini-buffer prompt, use ~P~ instead.

#+begin_src emacs-lisp
(unless (version< (org-version) "9.2")
  (tempo-define-template "org-insert-image"
    '("#+ATTR_ORG: :width 700px" n
      "#+ATTR_HTML: :width 100%" n
      "[[" (p "Link to image: ") "]]")
    "<ii"
    "Insert image"
    'org-tempo-tags))
#+end_src

** Aesthetics

Org mode does not visual wrap by default, but that's the most sensible way to view prose when you type one-sentence-per-line.

/TODO:/ Forbid visual wrapping in the middle of a word.
/FIXME:/ The =text-mode-hook= doesn't seem to be working.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
#+END_SRC

Don't show images in their actual size!

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

** Agenda

Read tasks from the Zetteldeft directory.
#+Begin_SRC emacs-lisp
(setq org-agenda-files (quote (
  "~/notes/"
)))
#+END_SRC

In order: show 21 days, starting from the present day, not highlighting the weekends; don't show tasks if they are already done, and don't warn about deadlines beyond today in today's agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 21
      org-agenda-start-on-weekday nil
      org-agenda-weekend-days nil
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-deadline-warning-days 0)
#+END_SRC

** Custom functions

After inserting a new image, I would usually have to ~org-toggle-inline-images~ twice to get it to display inline.

#+begin_src emacs-lisp
(defun org-toggle-inline-images-twice ()
  "Executes org-toggle-inline-images twice."
  (interactive)
  (org-toggle-inline-images)
  (org-toggle-inline-images))
(add-hook 'org-mode-hook
  (lambda ()
    (local-set-key (kbd "C-c C-x M-v") 'org-toggle-inline-images-twice)))
#+end_src

* Configurations for writing in LaTeX

** Load auctex

#+begin_src emacs-lisp
(use-package tex :ensure auctex)
#+end_src

** Use latexmk with auctex

#+begin_src emacs-lisp
(use-package auctex-latexmk
  :ensure t
  :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))
#+end_src

** Load latex-preview-pane

#+begin_src emacs-lisp
(use-package latex-preview-pane :ensure t)
#+end_src

* Configurations for programming in R

** Initialise ess

#+begin_src emacs-lisp
(use-package ess
  :ensure t
  :init (require 'ess-r-mode))
#+end_src

Out of the box, indentation is 4 spaces.
I prefer 2.

#+begin_src emacs-lisp
(setq ess-default-style 'DEFAULT
      ess-indent-level 2)
#+end_src

Note that the ~'DEFAULT~ is not literally the default, but otherwise ESS will not respect ~ess-indent-level~[fn::https://stackoverflow.com/a/17610845/6910451].

* Configurations for assorted packages

Packages which don't require a lengthy configuration.

** Load which-key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+end_src

** Load pdf-tools

#+begin_src emacs-lisp
(use-package tablist :ensure t)  ; dependency
(use-package pdf-tools :ensure t)
(pdf-tools-install)
#+end_src

** Load magit

#+begin_src emacs-lisp
(use-package magit :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src

* Zetteldeft

/deft-extensions/ determines which files in the /deft-directory/ should be considered as /deft/ (or /zetteldeft/) notes.
/deft-default-extension/ determines the default extension of new /deft/ (or /detteldeft/) notes.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config (setq deft-directory "~/notes"
                deft-extensions '("org")
		deft-default-extension "org"
                deft-use-filename-as-title t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package zetteldeft
  :ensure t
  :after deft
  :config (zetteldeft-set-classic-keybindings))
#+END_SRC

When a new file is created, automatically add a line to enter tags.

#+BEGIN_SRC emacs-lisp
(setq zetteldeft-title-suffix "\n#+TAGS: ")
#+END_SRC

* TODOs

Things to try or do:

- Map ~C-u C-k~ to kill-visual-line but without adding to the kill ring.
- Set a directory for backup files so they don't clutter working directories.
- Remove the HTML export postamble on org mode files.
- In the [[https://orgmode.org/manual/The-date_002ftime-prompt.html][org date/time prompt]]: map ~S-f~, ~S-b~ to day movement; ~S-n~, ~S-p~ to week movement; and ~M-S-n~, ~M-S-p~ to month movement.
- Set an org-agenda custome command which shows all TODOs without a deadline or scheduled datetime[fn:: https://stackoverflow.com/questions/17003338/emacs-org-mode-how-to-find-all-todos-that-dont-have-a-deadline-specified].
- [[https://melpa.org/#/transpose-frame][transpose-frame]], but rename the functions to be prefixed with ~frame-~.
- [[https://github.com/waymondo/frog-jump-buffer][frog-jump-buffer]]
- [[https://github.com/200ok-ch/organice][organice]]
- [[https://github.com/abo-abo/org-download][org-download]]
- [[https://gitlab.com/xuhdev/dired-quick-sort][dired-quick-sort]]
- Get ~dabbrev-expand~ to search all /visible/ buffers.
