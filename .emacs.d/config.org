#+TITLE: emacs config

Ensure that /use-package/ is installed, then add the MELPA repository.
Here, I use /http/ rather than /https/, because otherwise there is a problem in installing /zetteldeft/ later (and possibly also for other packages)[fn:: https://emacs.stackexchange.com/a/39295/30033].

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives
  '("MELPA" . "http://melpa.org/packages/"))
(add-to-list 'package-archives
  '("org" . "https://orgmode.org/elpa/") t)
(package-initialize)
(package-refresh-contents)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

* Configurations for Emacs Itself

** Aesthetics

*** Use the ~spacemacs-light~ theme

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-common
  :ensure spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-light t))
#+END_SRC

*** Set column width as 80 rather than 70

#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

***  Show column number in the mode line

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

*** Don't show menu and tool bars in graphical Emacs

    #+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
    #+end_src

*** Show tab characters and highlight trailing spaces

    #+begin_src emacs-lisp
(global-whitespace-mode 1)
(setq whitespace-style '(face trailing tabs tab-mark))
    #+end_src

    #+RESULTS:
    | face | trailing | tabs | tab-mark |

** Behaviour

*** Never ask me to type "yes"/​"no", only "y"/"n"

    #+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

*** Only one, not two spaces follow a period, at a sentence's end

    This affects how sentence-based movements work, e.g. ~M-f~ and ~M-b~.

    #+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
    #+END_SRC

*** Eagerly save bookmarks whenever they are created

    The default behaviour is to only save when Emacs is killed, or upon ~M-x bookmark-save~.

    #+begin_src emacs-lisp
(setq bookmark-save-flag 1)
#+end_src

** Custom functions

Insert a _z_​ero-​_w_​idth _s_​pace.

#+BEGIN_SRC emacs-lisp
(defun my-zws ()
  (interactive)
  (insert-char #x200b))
#+END_SRC

Insert a section sign (§).

#+begin_src emacs-lisp
(defun my-sec ()
  (interactive)
  (insert-char #xa7))
#+end_src

Except for the current buffer, kill all other buffers.

#+BEGIN_SRC emacs-lisp
(defun my-kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer 
        (delq (current-buffer) 
              (remove-if-not 'buffer-file-name (buffer-list)))))
#+END_SRC

Load this config file.

#+BEGIN_SRC emacs-lisp
(defun my-load-config ()
  (interactive)
    (org-babel-load-file
      (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

* Configurations for Org mode

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

Enable the ~:RESET_CHECK_BOXES:~ property.[fn:: https://stackoverflow.com/q/20164918/6910451]

#+BEGIN_SRC emacs-lisp
(use-package org-checklist
  :ensure org-plus-contrib)
#+END_SRC

Flyspell by default.
~M-$~ to open suggestions.

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

Babel languages.

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
  (append org-babel-load-languages
    '((R . t)
      (python . t))))
(setq org-babel-python-command "python3")
#+end_src

/TODO:/ Document the following.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-todo-keywords '((sequence "TODO" "DONE")))
#+END_SRC

** Asynchronous src block execution

#+begin_src emacs-lisp
(use-package ob-async :ensure t)
#+end_src

** mixed-pitch

A minor mode that allows for variable-width fonts.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :ensure t
  :hook
  (org-mode . mixed-pitch-mode))
#+end_src



** Structure Templates

[[https://orgmode.org/manual/Structure-Templates.html][Structure templates]] allow you to quickly insert predefined text into org mode files.
The default behaviour is to open an interactive menu using ~C-c C-,~, and where the text to be inserted is chosen.
I opt instead to use the older /org-tempo/ behaviour which uses a much quicker ~< trigger TAB~.
Continue using ~< s TAB~ for easy templates[fn:: https://emacs.stackexchange.com/a/46992/30033].

#+begin_src emacs-lisp
(unless (version< (org-version) "9.2")
  (require 'org-tempo))
#+end_src

*** Custom Structure Templates

/TODO:/ Set this as a default export option rather than a thing to be manually included.

#+begin_src emacs-lisp
(unless (version< (org-version) "9.2")
  (tempo-define-template "org-export-css" ; template name, for documentation only
    '("#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js" n
      "#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" />" n
      "#+HTML_HEAD: <style> p { text-align: justify; } </style>")
    "<css"
    "Insert properties for Solarized CSS"
    'org-tempo-tags))
#+end_src

Quick template to insert images.
~p~ will place the cursor at that position when ~tempo-interactive~  is ~nil~, which it is.
To force a mini-buffer prompt, use ~P~ instead.

#+begin_src emacs-lisp
(unless (version< (org-version) "9.2")
  (tempo-define-template "org-insert-image"
    '("#+ATTR_ORG: :width 700px" n
      "#+ATTR_HTML: :width 100%" n
      "[[" (p "Link to image: ") "]]")
    "<ii"
    "Insert image"
    'org-tempo-tags))
#+end_src

** Aesthetics

Org mode does not visual wrap by default, but that's the most sensible way to view prose when you type one-sentence-per-line.

/TODO:/ Forbid visual wrapping in the middle of a word.
/FIXME:/ The =text-mode-hook= doesn't seem to be working.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'visual-line-mode)
#+END_SRC

The default behaviour for collapsed subtrees is to produce a free space between that collapsed subtree and the next heading only if there are at least 2 empty lines after the end of a subtree.
This is not how I'm used to typing---I usually only leave 1 empty line after each paragraph or section.

#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 1)
#+END_SRC

Don't show images in their actual size!

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

** Agenda

Read tasks from the Zetteldeft directory.
#+Begin_SRC emacs-lisp
(setq org-agenda-files (quote (
  "~/notes/"
)))
#+END_SRC

In order: show 7 days, starting from the present day, not highlighting the weekends; don't show tasks if they are already done, and don't warn about deadlines beyond today in today's agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 7
      org-agenda-start-on-weekday nil
      org-agenda-weekend-days nil
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-deadline-warning-days 0)
#+END_SRC

* Configurations for programming in R

** Initialise ess

#+begin_src emacs-lisp
(use-package ess
  :ensure t
  :init (require 'ess-r-mode))
#+end_src

Out of the box, indentation is 4 spaces.
I prefer 2.

#+begin_src emacs-lisp
(setq ess-default-style 'DEFAULT
      ess-indent-level 2)
#+end_src

Note that the ~'DEFAULT~ is not literally the default, but otherwise ESS will not respect ~ess-indent-level~[fn::https://stackoverflow.com/a/17610845/6910451].

* Configurations for assorted packages

Packages which don't require a lengthy configuration.

** Initialise which-key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+end_src

* Zetteldeft

/deft-extensions/ determines which files in the /deft-directory/ should be considered as /deft/ (or /zetteldeft/) notes.
/deft-default-extension/ determines the default extension of new /deft/ (or /detteldeft/) notes.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config (setq deft-directory "~/notes"
                deft-extensions '("org")
		deft-default-extension "org"
                deft-use-filename-as-title t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package zetteldeft
  :ensure t
  :after deft
  :config (zetteldeft-set-classic-keybindings))
#+END_SRC

When a new file is created, automatically add a line to enter tags.

#+BEGIN_SRC emacs-lisp
(setq zetteldeft-title-suffix "\n#+TAGS: ")
#+END_SRC

* magit

#+begin_src emacs-lisp
(use-package magit :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src

* TODOs

Things to try or do:

- Set up [[https://github.com/odeke-em/drive][drive sync]].
- Remove the HTML export postamble on org mode files.
- In the [[https://orgmode.org/manual/The-date_002ftime-prompt.html][org date/time prompt]]: map ~S-f~, ~S-b~ to day movement; ~S-n~, ~S-p~ to week movement; and ~M-S-n~, ~M-S-p~ to month movement.
- Set an org-agenda custome command which shows all TODOs without a deadline or scheduled datetime[fn:: https://stackoverflow.com/questions/17003338/emacs-org-mode-how-to-find-all-todos-that-dont-have-a-deadline-specified].
- [[https://melpa.org/#/transpose-frame][transpose-frame]], but rename the functions to be prefixed with ~frame-~.
- [[https://github.com/waymondo/frog-jump-buffer][frog-jump-buffer]]
- [[https://github.com/200ok-ch/organice][organice]]
- [[https://github.com/abo-abo/org-download][org-download]]

* What's Bad About emacs?

- There is no way to escape square brackets in org mode links[fn:: https://stackoverflow.com/questions/27284913/how-to-escape-square-bracket-in-org-mode-links].
  This is more of a "what's so bad about org mode".
